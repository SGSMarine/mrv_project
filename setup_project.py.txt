import os

# Proje kök dizini
project_root = 'mrv_project'

# Dizin ve dosya yapısı
directories = [
    project_root,
    os.path.join(project_root, 'mrv_project'),
    os.path.join(project_root, 'maritime'),
    os.path.join(project_root, 'maritime', 'migrations'),
    os.path.join(project_root, 'templates'),
    os.path.join(project_root, 'templates', 'maritime'),
    os.path.join(project_root, 'static'),
    os.path.join(project_root, 'static', 'css'),
]

files = {
    os.path.join(project_root, 'manage.py'): """#!/usr/bin/env python
import os
import sys

def main():
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mrv_project.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)

if __name__ == '__main__':
    main()
""",
    os.path.join(project_root, 'mrv_project', '__init__.py'): '',
    os.path.join(project_root, 'mrv_project', 'settings.py'): """import os
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'your-secret-key')

DEBUG = os.getenv('DJANGO_DEBUG', 'False') == 'True'

ALLOWED_HOSTS = os.getenv('DJANGO_ALLOWED_HOSTS', '').split(',')

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'maritime',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mrv_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mrv_project.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME', 'mrvdb'),
        'USER': os.getenv('DB_USER', 'mrvuser'),
        'PASSWORD': os.getenv('DB_PASSWORD', 'password'),
        'HOST': os.getenv('DB_HOST', 'localhost'),
        'PORT': os.getenv('DB_PORT', '5432'),
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

STATIC_URL = 'static/'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
""",
    os.path.join(project_root, 'mrv_project', 'urls.py'): """from django.contrib import admin
from django.urls import path, include
from django.contrib.auth import views as auth_views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('accounts/login/', auth_views.LoginView.as_view(), name='login'),
    path('accounts/logout/', auth_views.LogoutView.as_view(), name='logout'),
    path('', include('maritime.urls')),
]
""",
    os.path.join(project_root, 'mrv_project', 'wsgi.py'): """import os
from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mrv_project.settings')

application = get_wsgi_application()
""",
    os.path.join(project_root, 'maritime', '__init__.py'): '',
    os.path.join(project_root, 'maritime', 'admin.py'): '',
    os.path.join(project_root, 'maritime', 'apps.py'): """from django.apps import AppConfig

class MaritimeConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'maritime'
""",
    os.path.join(project_root, 'maritime', 'forms.py'): """from django import forms
from .models import MRVReport, Ship

class MRVReportForm(forms.ModelForm):
    class Meta:
        model = MRVReport
        fields = '__all__'
        widgets = {
            'report_date_time': forms.DateTimeInput(attrs={'type': 'datetime-local'}),
        }

class ShipForm(forms.ModelForm):
    class Meta:
        model = Ship
        fields = '__all__'
""",
    os.path.join(project_root, 'maritime', 'models.py'): """from django.db import models

class Ship(models.Model):
    name = models.CharField(max_length=100)
    production_year = models.IntegerField()
    imo_number = models.CharField(max_length=20)
    main_engine_brand = models.CharField(max_length=100)
    main_engine_model = models.CharField(max_length=100)

    def __str__(self):
        return self.name

class MRVReport(models.Model):
    REPORT_TYPES = [
        ('arrival', 'Arrival Report'),
        ('departure', 'Departure Report'),
        ('noon', 'Noon Report'),
        ('daily_port', 'Daily Port Report'),
        ('berthing', 'Berthing Report'),
    ]

    ship = models.ForeignKey(Ship, on_delete=models.CASCADE)
    report_type = models.CharField(max_length=20, choices=REPORT_TYPES)
    report_date_time = models.DateTimeField()
    time_zone_area = models.CharField(max_length=10)
    port_name = models.CharField(max_length=100)
    etd = models.CharField(max_length=50, blank=True, null=True)
    total_cargo_amount = models.DecimalField(max_digits=10, decimal_places=2)
    rob_hfo_amount = models.DecimalField(max_digits=10, decimal_places=2)
    rob_lfo_amount = models.DecimalField(max_digits=10, decimal_places=2)
    rob_mgo_amount = models.DecimalField(max_digits=10, decimal_places=2)
    supplied_hfo_amount = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    supplied_lfo_amount = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    supplied_mgo_amount = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    remark = models.TextField(blank=True, null=True)

    def __str__(self):
        return f"{self.ship.name} - {self.get_report_type_display()} - {self.report_date_time}"
""",
    os.path.join(project_root, 'maritime', 'tests.py'): """from django.test import TestCase
from .models import Ship, MRVReport
from .forms import MRVReportForm, ShipForm

class ShipModelTest(TestCase):
    def setUp(self):
        self.ship = Ship.objects.create(
            name="Test Ship",
            production_year=2020,
            imo_number="1234567",
            main_engine_brand="Test Brand",
            main_engine_model="Test Model"
        )

    def test_ship_creation(self):
        self.assertEqual(self.ship.name, "Test Ship")
        self.assertEqual(self.ship.production_year, 2020)

class MRVReportFormTest(TestCase):
    def setUp(self):
        self.ship = Ship.objects.create(
            name="Test Ship",
            production_year=2020,
            imo_number="1234567",
            main_engine_brand="Test Brand",
            main_engine_model="Test Model"
        )

    def test_valid_form(self):
        data = {
            'ship': self.ship.id,
            'report_type': 'arrival',
            'report_date_time': '2024-06-25T10:00:00Z',
            'time_zone_area': 'GMT+2',
            'port_name': 'Test Port',
            'total_cargo_amount': 100.0,
            'rob_hfo_amount': 50.0,
            'rob_lfo_amount': 20.0,
            'rob_mgo_amount': 30.0,
            'supplied_hfo_amount': 10.0,
            'supplied_lfo_amount': 5.0,
            'supplied_mgo_amount': 8.0,
            'remark': 'Test Remark'
        }
        form = MRVReportForm(data=data)
        self.assertTrue(form.is_valid())

    def test_invalid_form(self):
        data = {}
        form = MRVReportForm(data=data)
        self.assertFalse(form.is_valid())
        self.assertEqual(len(form.errors), 10)

class ViewsTest(TestCase):
    def setUp(self):
        self.ship = Ship.objects.create(
            name="Test Ship",
            production_year=2020,
            imo_number="1234567",
            main_engine_brand="Test Brand",
            main_engine_model="Test Model"
        )

    def test_home_view(self):
        response = self.client.get(reverse('home'))
        self.assertEqual(response.status_code, 200)

    def test_add_ship_view(self):
        response = self.client.get(reverse('add_ship'))
        self.assertEqual(response.status_code, 200)

    def test_ship_list_view(self):
        response = self.client.get(reverse('ship_list'))
        self.assertEqual(response.status_code, 200)

    def test_collect_data_view(self):
        response = self.client.get(reverse('collect_data'))
        self.assertEqual(response.status_code, 200)
""",
    os.path.join(project_root, 'maritime', 'urls.py'): """from django.urls import path
from . import views

urlpatterns = [
    path('', views.home, name='home'),
    path('add_ship/', views.add_ship, name='add_ship'),
    path('ship_list/', views.ship_list, name='ship_list'),
    path('collect_data/', views.collect_data, name='collect_data'),
]
""",
    os.path.join(project_root, 'maritime', 'views.py'): """from django.contrib.auth.decorators import login_required
from django.shortcuts import render, redirect
from .forms import MRVReportForm, ShipForm
from .models import MRVReport, Ship

@login_required
def home(request):
    return render(request, 'maritime/home.html')

@login_required
def add_ship(request):
    if request.method == 'POST':
        form = ShipForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('ship_list')
    else:
        form = ShipForm()
    return render(request, 'maritime/add_ship.html', {'form': form})

@login_required
def ship_list(request):
    ships = Ship.objects.all()
    return render(request, 'maritime/ship_list.html', {'ships': ships})

@login_required
def collect_data(request):
    if request.method == 'POST'):
        form = MRVReportForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('home')
    else:
        form = MRVReportForm()
    return render(request, 'maritime/collect_data.html', {'form': form})
""",
    os.path.join(project_root, 'templates', 'maritime', 'base.html'): """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>MRV Project</title>
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
</head>
<body>
    <header>
        <h1>MRV Project</h1>
        <nav>
            <ul>
                <li><a href="{% url 'home' %}">Home</a></li>
                <li><a href="{% url 'add_ship' %}">Add Ship</a></li>
                <li><a href="{% url 'ship_list' %}">Ship List</a></li>
                <li><a href="{% url 'collect_data' %}">Collect Data</a></li>
                <li><a href="{% url 'login' %}">Login</a></li>
                <li><a href="{% url 'logout' %}">Logout</a></li>
            </ul>
        </nav>
    </header>
    <main>
        {% block content %}
        {% endblock %}
    </main>
</body>
</html>
""",
    os.path.join(project_root, 'templates', 'maritime', 'home.html'): """{% extends 'maritime/base.html' %}

{% block content %}
    <h2>Welcome to MRV Project</h2>
    <p>This is the home page.</p>
{% endblock %}
""",
    os.path.join(project_root, 'templates', 'maritime', 'add_ship.html'): """{% extends 'maritime/base.html' %}

{% block content %}
    <h2>Add Ship</h2>
    <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Add Ship</button>
    </form>
    {% if form.errors %}
        <div class="form-errors">
            <ul>
                {% for field in form %}
                    {% for error in field.errors %}
                        <li>{{ error }}</li>
                    {% endfor %}
                {% endfor %}
                {% for error in form.non_field_errors %}
                    <li>{{ error }}</li>
                {% endfor %}
            </ul>
        </div>
    {% endif %}
{% endblock %}
""",
    os.path.join(project_root, 'templates', 'maritime', 'ship_list.html'): """{% extends 'maritime/base.html' %}

{% block content %}
    <h2>Ship List</h2>
    <table>
        <tr>
            <th>Name</th>
            <th>Production Year</th>
            <th>IMO Number</th>
            <th>Main Engine Brand</th>
            <th>Main Engine Model</th>
        </tr>
        {% for ship in ships %}
        <tr>
            <td>{{ ship.name }}</td>
            <td>{{ ship.production_year }}</td>
            <td>{{ ship.imo_number }}</td>
            <td>{{ ship.main_engine_brand }}</td>
            <td>{{ ship.main_engine_model }}</td>
        </tr>
        {% endfor %}
    </table>
{% endblock %}
""",
    os.path.join(project_root, 'templates', 'maritime', 'collect_data.html'): """{% extends 'maritime/base.html' %}

{% block content %}
    <h2>Collect Data</h2>
    <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Submit</button>
    </form>
{% endblock %}
""",
    os.path.join(project_root, 'static', 'css', 'style.css'): """body {
    font-family: Arial, sans-serif;
}

header {
    background-color: #f8f9fa;
    padding: 1rem;
}

nav ul {
    list-style-type: none;
    padding: 0;
}

nav ul li {
    display: inline;
    margin-right: 1rem;
}

.main {
    padding: 2rem;
}

.form-errors {
    color: red;
}
""",
    os.path.join(project_root, '.env'): """DJANGO_SECRET_KEY=your-secret-key
DJANGO_DEBUG=False
DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1
DB_NAME=mrvdb
DB_USER=mrvuser
DB_PASSWORD=password
DB_HOST=localhost
DB_PORT=5432
""",
    os.path.join(project_root, 'requirements.txt'): """Django>=3.2,<4.0
psycopg2-binary>=2.8
""",
    os.path.join(project_root, 'README.md'): """# MRV Project

This project is a Django-based application for managing ships and MRV (Monitoring, Reporting, and Verification) reports.

## Installation

1. Clone the repository:
   ```sh
   git clone https://github.com/SGSMarine/mrv_project.git
   cd mrv_project
